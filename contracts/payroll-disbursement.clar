(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INSUFFICIENT-FUNDS u101)
(define-constant ERR-INVALID-WORKER u102)
(define-constant ERR-DISPUTE-ACTIVE u103)
(define-constant ERR-PAUSED u104)
(define-constant ERR-INVALID-AMOUNT u105)
(define-constant ERR-INVALID-SCHEDULE u106)
(define-constant ERR-ALREADY-DISBURSED u107)
(define-constant ERR-INVALID-TIMESTAMP u108)
(define-constant ERR-CONTRACT-NOT-SET u109)
(define-constant ERR-INVALID-STATUS u110)
(define-constant ERR-MAX-DISBURSEMENTS-EXCEEDED u111)
(define-constant ERR-INVALID-PAYROLL-POOL u112)
(define-constant ERR-INVALID-ADMIN u113)
(define-constant ERR-INVALID-WORKER-ROLE u114)
(define-constant ERR-INVALID-CURRENCY u115)
(define-constant ERR-INVALID-GRACE-PERIOD u116)
(define-constant ERR-INVALID-PENALTY-RATE u117)
(define-constant ERR-INVALID-VOTING-THRESHOLD u118)
(define-constant ERR-INVALID-LOCATION u119)
(define-constant ERR-INVALID-GROUP-ID u120)

(define-data-var contract-admin principal tx-sender)
(define-data-var is-paused bool false)
(define-data-var max-disbursements uint u1000)
(define-data-var payroll-pool-balance uint u0)
(define-data-var next-disbursement-id uint u0)
(define-data-var worker-registry-contract (optional principal) none)
(define-data-var payroll-funding-contract (optional principal) none)
(define-data-var dispute-resolution-contract (optional principal) none)
(define-data-var audit-log-contract (optional principal) none)
(define-data-var transparency-report-contract (optional principal) none)

(define-map disbursements uint { worker: principal, amount: uint, timestamp: uint, status: bool })
(define-map worker-schedules principal { schedule: uint, last-disbursed: uint, amount: uint })
(define-map worker-roles principal (string-utf8 50))
(define-map disbursement-history principal (list 100 uint))
(define-map payroll-groups uint { name: (string-utf8 100), members: (list 50 principal) })
(define-map group-admins uint principal)
(define-map currencies (string-utf8 20) bool)
(define-map grace-periods principal uint)
(define-map penalty-rates principal uint)
(define-map voting-thresholds uint uint)
(define-map locations principal (string-utf8 100))

(define-read-only (get-disbursement (id uint))
  (map-get? disbursements id)
)

(define-read-only (get-worker-schedule (worker principal))
  (map-get? worker-schedules worker)
)

(define-read-only (get-payroll-pool-balance)
  (ok (var-get payroll-pool-balance))
)

(define-read-only (get-next-disbursement-id)
  (ok (var-get next-disbursement-id))
)

(define-read-only (get-worker-role (worker principal))
  (map-get? worker-roles worker)
)

(define-read-only (get-disbursement-history (worker principal))
  (map-get? disbursement-history worker)
)

(define-read-only (get-payroll-group (group-id uint))
  (map-get? payroll-groups group-id)
)

(define-read-only (is-currency-supported (currency (string-utf8 20)))
  (default-to false (map-get? currencies currency))
)

(define-private (validate-worker (worker principal))
  (match (var-get worker-registry-contract)
    reg (contract-call? reg is-registered worker)
    (err ERR-CONTRACT-NOT-SET)
  )
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok true)
    (err ERR-INVALID-AMOUNT)
  )
)

(define-private (validate-schedule (schedule uint))
  (if (> schedule u0)
    (ok true)
    (err ERR-INVALID-SCHEDULE)
  )
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
    (ok true)
    (err ERR-INVALID-TIMESTAMP)
  )
)

(define-private (validate-status (status bool))
  (ok true)
)

(define-private (validate-currency (currency (string-utf8 20)))
  (if (is-currency-supported currency)
    (ok true)
    (err ERR-INVALID-CURRENCY)
  )
)

(define-private (validate-grace-period (period uint))
  (if (<= period u30)
    (ok true)
    (err ERR-INVALID-GRACE-PERIOD)
  )
)

(define-private (validate-penalty-rate (rate uint))
  (if (<= rate u100)
    (ok true)
    (err ERR-INVALID-PENALTY-RATE)
  )
)

(define-private (validate-voting-threshold (threshold uint))
  (if (and (> threshold u0) (<= threshold u100))
    (ok true)
    (err ERR-INVALID-VOTING-THRESHOLD)
  )
)

(define-private (validate-location (loc (string-utf8 100)))
  (if (and (> (len loc) u0) (<= (len loc) u100))
    (ok true)
    (err ERR-INVALID-LOCATION)
  )
)

(define-private (validate-group-id (group-id uint))
  (if (is-some (map-get? payroll-groups group-id))
    (ok true)
    (err ERR-INVALID-GROUP-ID)
  )
)

(define-private (check-dispute (worker principal))
  (match (var-get dispute-resolution-contract)
    disp (contract-call? disp has-active-dispute worker)
    (err ERR-CONTRACT-NOT-SET)
  )
)

(define-private (check-funds (amount uint))
  (if (>= (var-get payroll-pool-balance) amount)
    (ok true)
    (err ERR-INSUFFICIENT-FUNDS)
  )
)

(define-private (log-disbursement (id uint))
  (match (var-get audit-log-contract)
    log (contract-call? log log-event id)
    (err ERR-CONTRACT-NOT-SET)
  )
)

(define-private (update-report (id uint))
  (match (var-get transparency-report-contract)
    rep (contract-call? rep update-report id)
    (err ERR-CONTRACT-NOT-SET)
  )
)

(define-public (set-worker-registry (contract principal))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set worker-registry-contract (some contract))
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-payroll-funding (contract principal))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set payroll-funding-contract (some contract))
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-dispute-resolution (contract principal))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set dispute-resolution-contract (some contract))
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-audit-log (contract principal))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set audit-log-contract (some contract))
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-transparency-report (contract principal))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set transparency-report-contract (some contract))
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (pause-contract)
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set is-paused true)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (unpause-contract)
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set is-paused false)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-max-disbursements (new-max uint))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (var-set max-disbursements new-max)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (add-currency (currency (string-utf8 20)))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (map-set currencies currency true)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-worker-schedule (worker principal) (schedule uint) (amount uint))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (try! (validate-schedule schedule))
      (try! (validate-amount amount))
      (map-set worker-schedules worker { schedule: schedule, last-disbursed: u0, amount: amount })
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-worker-role (worker principal) (role (string-utf8 50)))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (map-set worker-roles worker role)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (create-payroll-group (group-id uint) (name (string-utf8 100)) (members (list 50 principal)))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (map-set payroll-groups group-id { name: name, members: members })
      (map-set group-admins group-id tx-sender)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-grace-period (worker principal) (period uint))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (try! (validate-grace-period period))
      (map-set grace-periods worker period)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-penalty-rate (worker principal) (rate uint))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (try! (validate-penalty-rate rate))
      (map-set penalty-rates worker rate)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-voting-threshold (group-id uint) (threshold uint))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (try! (validate-voting-threshold threshold))
      (map-set voting-thresholds group-id threshold)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (set-location (worker principal) (loc (string-utf8 100)))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (try! (validate-location loc))
      (map-set locations worker loc)
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)

(define-public (disburse-salary (worker principal))
  (let (
    (schedule-opt (map-get? worker-schedules worker))
    (dispute (check-dispute worker))
    (next-id (var-get next-disbursement-id))
  )
    (asserts! (not (var-get is-paused)) (err ERR-PAUSED))
    (asserts! (< next-id (var-get max-disbursements)) (err ERR-MAX-DISBURSEMENTS-EXCEEDED))
    (try! (validate-worker worker))
    (try! dispute)
    (match schedule-opt
      sched
      (let (
        (amount (get amount sched))
        (last-ts (get last-disbursed sched))
        (sch (get schedule sched))
        (current-ts block-height)
      )
        (asserts! (>= current-ts (+ last-ts sch)) (err ERR-ALREADY-DISBURSED))
        (try! (check-funds amount))
        (try! (as-contract (stx-transfer? amount tx-sender worker)))
        (var-set payroll-pool-balance (- (var-get payroll-pool-balance) amount))
        (map-set disbursements next-id { worker: worker, amount: amount, timestamp: current-ts, status: true })
        (map-set worker-schedules worker { schedule: sch, last-disbursed: current-ts, amount: amount })
        (map-set disbursement-history worker (cons next-id (default-to (list) (map-get? disbursement-history worker))))
        (try! (log-disbursement next-id))
        (try! (update-report next-id))
        (var-set next-disbursement-id (+ next-id u1))
        (ok next-id)
      )
      (err ERR-INVALID-WORKER)
    )
  )
)

(define-public (update-pool-balance (amount uint))
  (match (var-get payroll-funding-contract)
    fund
    (if (is-eq tx-sender fund)
      (begin
        (var-set payroll-pool-balance (+ (var-get payroll-pool-balance) amount))
        (ok true)
      )
      (err ERR-NOT-AUTHORIZED)
    )
    (err ERR-CONTRACT-NOT-SET)
  )
)

(define-public (withdraw-funds (amount uint))
  (if (is-eq tx-sender (var-get contract-admin))
    (begin
      (try! (check-funds amount))
      (try! (as-contract (stx-transfer? amount tx-sender (var-get contract-admin))))
      (var-set payroll-pool-balance (- (var-get payroll-pool-balance) amount))
      (ok true)
    )
    (err ERR-NOT-AUTHORIZED)
  )
)